(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{437:function(t,a,e){t.exports=e.p+"assets/img/mm1.58466209.png"},438:function(t,a,e){t.exports=e.p+"assets/img/mm2.d8a06e6c.png"},439:function(t,a,e){t.exports=e.p+"assets/img/mm3.718c6ad8.png"},440:function(t,a,e){t.exports=e.p+"assets/img/mm4.7591a2af.png"},441:function(t,a,e){t.exports=e.p+"assets/img/mm5.6929a4d2.png"},442:function(t,a,e){t.exports=e.p+"assets/img/mm6.82afa364.png"},443:function(t,a,e){t.exports=e.p+"assets/img/mm7.2d5d5318.png"},444:function(t,a,e){t.exports=e.p+"assets/img/mm8.6b1d8e40.png"},552:function(t,a,e){"use strict";e.r(a);var s=e(59),i=Object(s.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[t._v("며칠간 메모리 관리하는 법(Memory Management)을 배우면서 CPU가 주는 논리 메모리 주소를 물리 주소로 바꾸는 방법을 배우고 있다. 그 중에서도 불연속 분할 방법인 페이징을 배웠다. 이번엔 단계를 여럿으로 나눠 페이징을 하는 방법에서부터 시작한다!")]),t._v(" "),s("h2",{attrs:{id:"다단계-페이징"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#다단계-페이징"}},[t._v("#")]),t._v(" 다단계 페이징")]),t._v(" "),s("ul",[s("li",[t._v("주소 공간이 커지면 다단계 페이지 테이블 필요")]),t._v(" "),s("li",[t._v("TLB(주소 변환 돕는 캐시 메모리)로 메모리 접근 시간을 줄일 수 있음")])]),t._v(" "),s("p",[s("img",{attrs:{src:e(437),alt:"4단계 페이지 테이블 사용하는 경우 예시"}})]),t._v(" "),s("h2",{attrs:{id:"페이지-테이블의-valid-invalid-비트"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#페이지-테이블의-valid-invalid-비트"}},[t._v("#")]),t._v(" 페이지 테이블의 Valid, Invalid 비트")]),t._v(" "),s("p",[s("img",{attrs:{src:e(438),alt:"valid, invalid bits"}})]),t._v(" "),s("ul",[s("li",[t._v("페이지 테이블 엔트리에는 사용되지 않는 비트여도 페이지 테이블을 만들어둔다.")]),t._v(" "),s("li",[t._v("테이블이라는 자료구조 특성상 위에서부터 천천히 접근하기 때문에 다 만들지만 사용을 안 하므로 i로 표시")]),t._v(" "),s("li",[t._v("0번 페이지가 2번 프레임에 있다.")])]),t._v(" "),s("h2",{attrs:{id:"메모리-보호"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#메모리-보호"}},[t._v("#")]),t._v(" 메모리 보호")]),t._v(" "),s("p",[s("img",{attrs:{src:e(439),alt:"protection bit"}})]),t._v(" "),s("ul",[s("li",[t._v("페이지 테이블의 각 엔트리마다 protection 비트와 Valid-invalid 비트가 있다.")]),t._v(" "),s("li",[t._v("protection bit: 페이지 접근 권한")])]),t._v(" "),s("h2",{attrs:{id:"지금까지의-문제"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#지금까지의-문제"}},[t._v("#")]),t._v(" 지금까지의 문제")]),t._v(" "),s("ul",[s("li",[t._v("페이지 테이블의 큰 용량")]),t._v(" "),s("li",[t._v("페이지에 메모리가 없어도 프로세스별로 모든 논리 주소에 대응하는 모든 페이지에 대해 페이지 테이블 엔트리를 만들어야함.")])]),t._v(" "),s("h2",{attrs:{id:"inverted-page-table-역방향-페이지-테이블"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#inverted-page-table-역방향-페이지-테이블"}},[t._v("#")]),t._v(" Inverted Page Table (역방향 페이지 테이블)")]),t._v(" "),s("p",[s("img",{attrs:{src:e(440),alt:"역방향 페이지 테이블 그림"}})]),t._v(" "),s("ul",[s("li",[t._v("시스템에 하나의 페이지 테이블만 존재.")]),t._v(" "),s("li",[t._v("페이지 프레임 하나당 하나의 페이지 테이블 엔트리 / 페이지테이블 엔트리가 물리메모리의 프레임 개수만큼 존재")]),t._v(" "),s("li",[s("strong",[t._v("기존의 논리 페이지 번호를 보고 페이지 테이블에서 그만큼 떨어진 엔트리에 가는 방법이 불가능")])]),t._v(" "),s("li",[t._v("엔트리를 다 검색해서 pid, p가 있는 엔트리를 찾고 물리 주소를 얻는다. => 단점임. 좋은 점은 페이지 테이블의 크기가 줄어든다는 것임.")])]),t._v(" "),s("h2",{attrs:{id:"shared-pages-페이지-공유"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#shared-pages-페이지-공유"}},[t._v("#")]),t._v(" Shared Pages (페이지 공유)")]),t._v(" "),s("p",[s("img",{attrs:{src:e(441),alt:"공유된 페이지"}})]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("공유되는 부분을 같은 프레임에, 한 카피만 물리적 메모리에 올림")])]),t._v(" "),s("li",[t._v("공유되는 부분: 재진입 가능한 코드Re-entrant code (pure code) 라고 한다.")]),t._v(" "),s("li",[t._v("shared code의 조건 1: "),s("strong",[t._v("Re-entrant code는 read-only!")])]),t._v(" "),s("li",[t._v("shared code의 조건 2: "),s("strong",[t._v("동일한 logical addr에 위치해야함")])])]),t._v(" "),s("h2",{attrs:{id:"segmentation-프로그램을-의미별로-나눔"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#segmentation-프로그램을-의미별로-나눔"}},[t._v("#")]),t._v(" Segmentation : 프로그램을 의미별로 나눔")]),t._v(" "),s("ul",[s("li",[t._v("프로그램은 의미 단위인 여러개의 세그먼트로 구성")]),t._v(" "),s("li",[t._v("세그먼트: logical unit (논리적인 단위)")]),t._v(" "),s("li",[t._v("작게는 프로그램의 함수 하나하나가 세그먼트일수도, 크게는 프로그램 전체를 하나의 세그먼트로 정의 가능")]),t._v(" "),s("li",[t._v("일반적으로 code, data, stack 부분이 하나의 세그먼트로 정의됨")]),t._v(" "),s("li",[t._v("e.g. main(), function, global 변수, stack, symbol table, arrays, etc.")])]),t._v(" "),s("h2",{attrs:{id:"segmentation-architecture"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#segmentation-architecture"}},[t._v("#")]),t._v(" Segmentation Architecture")]),t._v(" "),s("ul",[s("li",[t._v("논리 주소: "),s("code",[t._v("<segment-number, offset>")])]),t._v(" "),s("li",[t._v("paging할 때와 비슷하다. offset의 범위 안에 있지 않으면 trap을 발생시킨다.")])]),t._v(" "),s("p",[s("img",{attrs:{src:e(442),alt:"세그먼트 하드웨어"}})]),t._v(" "),s("h3",{attrs:{id:"segment-table"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#segment-table"}},[t._v("#")]),t._v(" Segment table")]),t._v(" "),s("ul",[s("li",[t._v("각각의 테이블 엔트리는 base(세그먼트 물리주소 시작주소)와 limit(세그먼트 길이)를 가짐")]),t._v(" "),s("li",[t._v("STBR(Segment-Table Base Register), 프로그램이 쓰는 세그먼트의 갯수를 기억하는 STLR(ST Limit Register)")]),t._v(" "),s("li",[t._v("페이지 테이블과 다른 점: "),s("strong",[t._v("limit이 있음. 페이징 기법은 페이지의 크기가 균일해 결국 오프셋 크기=페이지 크기인데 세그먼트의 경우 의미별로 자르는 거라 길이가 다 다르다(offset보단 작아야함). 그리고 페이징 기법은 시작 주소가 프레임 번호면 되는데(물리적 메모리도 같은 크기의 프레임으로 나눠져있기 때문) 세그먼트 기법에서는 베이스 위치로 어디서 프레임이 시작하는지 정확한 바이트 주소를 줘야 하기 때문.")])])]),t._v(" "),s("h3",{attrs:{id:"protection"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#protection"}},[t._v("#")]),t._v(" Protection")]),t._v(" "),s("ul",[s("li",[t._v("각 세그먼트 별로 프로텍션 비트가 있음")]),t._v(" "),s("li",[t._v("Valid bit가 0이면 Invalid bit")])]),t._v(" "),s("h3",{attrs:{id:"공유"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#공유"}},[t._v("#")]),t._v(" 공유")]),t._v(" "),s("ul",[s("li",[t._v("의미 단위로 자르기 때문에 페이징보다 공유, 보안에 있어 훨씬 효과적임")])]),t._v(" "),s("h3",{attrs:{id:"할당-allocation"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#할당-allocation"}},[t._v("#")]),t._v(" 할당 (allocation)")]),t._v(" "),s("p",[s("img",{attrs:{src:e(443),alt:"세그먼트 할당"}})]),t._v(" "),s("ul",[s("li",[t._v("segment의 길이가 동일하지 않으므로 가변분할 방식에서와 동일한 문제점들이 발생 (external frag)")]),t._v(" "),s("li",[t._v("segment의 크기가 각기 달라 hole이 발생하는 게 segmentation의 약점")])]),t._v(" "),s("p",[s("img",{attrs:{src:e(444),alt:"세그먼트 공유"}})]),t._v(" "),s("h2",{attrs:{id:"페이징-세그먼테이션"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#페이징-세그먼테이션"}},[t._v("#")]),t._v(" 페이징 + 세그먼테이션")]),t._v(" "),s("ul",[s("li",[t._v("세그먼트 하나가 여러개의 페이지로 구성됨. 메모리에 올라갈때 페이지 단위로 쪼개져서 올라감")]),t._v(" "),s("li",[t._v("세그먼트 테이블 엔트리가 세그먼트의 base 주소를 가지지 않고! 세그먼트를 구성하는 페이지 테이블의 base 주소를 가짐")]),t._v(" "),s("li",[t._v("d 오프셋이 세그먼트의 길이 이내여야만 유효함 / "),s("strong",[t._v("d'는 페이지 안에서 얼마나 떨어져있는지 오프셋")])])])])}),[],!1,null,null,null);a.default=i.exports}}]);