(window.webpackJsonp=window.webpackJsonp||[]).push([[50],{508:function(t,e,a){"use strict";a.r(e);var s=a(59),r=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"msa-마이크로서비스-아키텍처"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#msa-마이크로서비스-아키텍처"}},[t._v("#")]),t._v(" MSA : 마이크로서비스 아키텍처")]),t._v(" "),a("ul",[a("li",[t._v("비즈니스 도메인별로 여러 서비스 운영")]),t._v(" "),a("li",[t._v("하루에도 수많은 커밋을 배포해 수많은 UX 개선")])]),t._v(" "),a("h2",{attrs:{id:"git-flow"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-flow"}},[t._v("#")]),t._v(" Git-Flow")]),t._v(" "),a("ul",[a("li",[t._v("feature branches, develop, release branches, hotfixes, main 브랜치")]),t._v(" "),a("li",[t._v("develop 브랜치를 베이스로 feature 브랜치를 생성하고 거기서 작업. -> 작업 완료 후 develop branch에 merge -> develop branch를 base로 release branch를 생성, 거기서 배포에 필요한 문서 작업 및 버그 수정 -> release 준비가 끝나면 해당 브랜치를 각각 main과 develop 브랜치에 머지")]),t._v(" "),a("li",[t._v("오픈소스 프로젝트와 같이 다수의 메인테이너들이 하나의 repo에서 동시 작업할 때 유리")])]),t._v(" "),a("h2",{attrs:{id:"ci-continuous-integration"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ci-continuous-integration"}},[t._v("#")]),t._v(" CI: Continuous Integration")]),t._v(" "),a("ul",[a("li",[t._v("travis CI")])]),t._v(" "),a("h2",{attrs:{id:"chatops"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#chatops"}},[t._v("#")]),t._v(" ChatOps")])])}),[],!1,null,null,null);e.default=r.exports}}]);