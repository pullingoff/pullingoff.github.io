(window.webpackJsonp=window.webpackJsonp||[]).push([[84],{544:function(t,r,e){"use strict";e.r(r);var a=e(59),s=Object(a.a)({},(function(){var t=this,r=t.$createElement,e=t._self._c||r;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("p",[t._v("세마포어: 프로그래머 관점에서 프로세스를 잘 동기화하는 방법을 보여주는 추상적 접근법."),e("br"),t._v("\n고전적인 프로세스 동기화 관련 문제에 대해 알아본다.")]),t._v(" "),e("h2",{attrs:{id:"concurrency-control-병행-제어"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#concurrency-control-병행-제어"}},[t._v("#")]),t._v(" Concurrency Control (병행 제어)")]),t._v(" "),e("ul",[e("li",[t._v("프로세스 동기화와 같은 얘기임. 병행 작업할때 잘 제어 하자^^")])]),t._v(" "),e("h2",{attrs:{id:"bounded-buffer-problem-producer-consumer-problem"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#bounded-buffer-problem-producer-consumer-problem"}},[t._v("#")]),t._v(" Bounded-Buffer Problem (Producer-consumer Problem)")]),t._v(" "),e("ul",[e("li",[t._v("Bounded Buffer = 유한하다.")])]),t._v(" "),e("img",{attrs:{width:"564",alt:"스크린샷 2022-02-25 오후 2 06 16",src:"https://user-images.githubusercontent.com/50111853/155657222-846c743e-a75c-4253-bbd9-e1f148998db1.png"}}),t._v(" "),e("ul",[e("li",[t._v("주황색이 데이터가 들어있는 버퍼들 / 회색이 비어있는 버퍼들. 생산자가 버퍼에 데이터를 집어넣는다.")]),t._v(" "),e("li",[t._v("producer, consumer 프로세스로 총 2 종류의 프로세스가 있음. 이때 프로듀서 프로세스 여러개, 컨수머 프로세스 여러개 가능")]),t._v(" "),e("li",[t._v("생산자: Empty buffer에 데이터를 만들어 집어넣는 역할")]),t._v(" "),e("li",[t._v("소비자: Full buffer에 데이터를 꺼내감")])]),t._v(" "),e("h3",{attrs:{id:"동기화-관련해-일어날-수-있는-문제"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#동기화-관련해-일어날-수-있는-문제"}},[t._v("#")]),t._v(" 동기화 관련해 일어날 수 있는 문제")]),t._v(" "),e("ol",[e("li",[t._v("공유버퍼이므로 생산자 둘이 한 버퍼에 데이터를 넣으려고 할 수도 있음")]),t._v(" "),e("li",[t._v("소비자 둘이 동시에 데이터를 꺼내가려할 수도 있음\n-> 데이터를 넣고 꺼내기 전에 Lock을 걸음으로써 해결가능")])]),t._v(" "),e("h3",{attrs:{id:"이-문제에서-semaphore-용도"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#이-문제에서-semaphore-용도"}},[t._v("#")]),t._v(" 이 문제에서 semaphore 용도")]),t._v(" "),e("ol",[e("li",[t._v("shared data의 mutual exclusion을 위해 binary semaphore 필요")]),t._v(" "),e("li",[t._v("가용 자원(empty buffer)의 개수를 센다 (counting semaphore)")])]),t._v(" "),e("h3",{attrs:{id:"bounded-buffer-코드로-해결하기"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#bounded-buffer-코드로-해결하기"}},[t._v("#")]),t._v(" Bounded-buffer 코드로 해결하기")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://user-images.githubusercontent.com/50111853/155870391-2ba9b914-bc80-4b99-b532-2db360b4b13b.png",alt:"바운디드 버퍼 문제 코드"}})]),t._v(" "),e("ul",[e("li",[t._v("mutex: 락을 걸기 위한 변수 (세마포어)")]),t._v(" "),e("li",[t._v("P(mutex), V(mutex)가 락을 걸고 푸는 연산임.")])]),t._v(" "),e("h2",{attrs:{id:"readers-writers-problem"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#readers-writers-problem"}},[t._v("#")]),t._v(" Readers-Writers Problem")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://user-images.githubusercontent.com/50111853/155870504-e706a0ac-4497-4804-b246-db9e4025e43b.png",alt:"reader-writer problem"}})]),t._v(" "),e("ul",[e("li",[t._v("공유 데이터인 DB의 데이터를 읽고 쓸 때 문제")]),t._v(" "),e("li",[e("strong",[t._v("write는 동시에 하면 안 되지만 read는 동시에 가능")])])]),t._v(" "),e("p",[e("img",{attrs:{src:"https://user-images.githubusercontent.com/50111853/155870566-2f8f3018-ff33-4ecd-91d1-74527f4a74ff.png",alt:"읽고 쓸 때 문제 해결"}})]),t._v(" "),e("ul",[e("li",[t._v("reader도 writer처럼 배타적으로 해도 되지만 비효율적임")]),t._v(" "),e("li",[t._v("Reader에선 readcount++함으로서 읽고 있는 자원의 수를 카운트할 수 있음.")]),t._v(" "),e("li",[t._v("다만 readcount도 공유 변수라 이거 값 바꿀 때 락 걸고 변경해야함!!!")]),t._v(" "),e("li",[t._v("내가 마지막으로 읽고 나가는 프로세스면(if readcount==0) DB에 걸어둔 락을 풀어야함")]),t._v(" "),e("li",[t._v("reader가 계속 올 경우 writer starvation 될 수도.")])]),t._v(" "),e("h2",{attrs:{id:"dining-philosophers-문제"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#dining-philosophers-문제"}},[t._v("#")]),t._v(" Dining-Philosophers 문제")]),t._v(" "),e("img",{attrs:{width:"412",alt:"식사하는 철학자 문제",src:"https://user-images.githubusercontent.com/50111853/155872584-47cf73f4-e7a9-423c-995d-6c34f20c7bc0.png"}}),t._v(" "),e("ul",[e("li",[t._v("철학자들은 밥을 먹거나 생각하거나 둘 중에 하나를 한다.")]),t._v(" "),e("li",[t._v("젓가락이 각각 공유자원이고, initially all values are 1 (하나씩 있다)")]),t._v(" "),e("li",[t._v("위 코드는 데드락 가능성이 있다.(=모든 철학자가 동시에 젓가락을 든 경우)")])]),t._v(" "),e("h3",{attrs:{id:"위-문제-해결-방안-3가지"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#위-문제-해결-방안-3가지"}},[t._v("#")]),t._v(" 위 문제 해결 방안 3가지")]),t._v(" "),e("ol",[e("li",[t._v("4명의 철학자만 테이블에 동시에 앉도록 한다")]),t._v(" "),e("li",[t._v("젓가락을 두개 잡을 수 있을 때에만 젓가락을 집게 한다")]),t._v(" "),e("li",[t._v("비대칭 (짝수-왼쪽 젓가락, 홀수-오른쪽 젓가락부터 잡을 수 있도록 제한)")])]),t._v(" "),e("img",{attrs:{width:"570",alt:"식사하는 철학자 문제",src:"https://user-images.githubusercontent.com/50111853/155874415-c1390407-f806-4d66-8b22-a7c6939c9515.png"}}),t._v(" "),e("h4",{attrs:{id:"pickup-int-i-젓가락을-잡는-함수"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#pickup-int-i-젓가락을-잡는-함수"}},[t._v("#")]),t._v(" pickup(int i): 젓가락을 잡는 함수")]),t._v(" "),e("h4",{attrs:{id:"test-젓가락-들-수-있는-환경인지-확인하는-함수"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#test-젓가락-들-수-있는-환경인지-확인하는-함수"}},[t._v("#")]),t._v(" test(): 젓가락 들 수 있는 환경인지 확인하는 함수")]),t._v(" "),e("ul",[e("li",[t._v("왼쪽, 오른쪽 철학자가 밥 먹고 있으면 if문 만족하지 않아 락 풀지 못함")])]),t._v(" "),e("h2",{attrs:{id:"세마포어의-문제점과-그를-보완해주는-모니터"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#세마포어의-문제점과-그를-보완해주는-모니터"}},[t._v("#")]),t._v(" 세마포어의 문제점과 그를 보완해주는 모니터")]),t._v(" "),e("img",{attrs:{width:"705",alt:"세마포어의 문제점",src:"https://user-images.githubusercontent.com/50111853/155872690-5a04d48a-ea2f-4efa-ae5d-04003b0af62d.png"}}),t._v(" "),e("ul",[e("li",[t._v("세마포어는 동기화하는 법을 알려주고 프로그래머가 제어할 수 있도록 함.")]),t._v(" "),e("li",[t._v("모니터: 프로그래밍 언어 차원에서 공유 자원에 접근하는 일을 모니터가 직접 하게 해 프로그래머의 부담을 줄여줌.")]),t._v(" "),e("li",[t._v("세마포어는 정확도를 검증하기 어려움/ 프로그래머의 실수가 영향을 끼칠 수 있다. (= 안정성 낮음)")]),t._v(" "),e("li",[t._v("monitor: 자바의 인스턴스 각각이 lock을 가진다. 자바 내부적으로 모니터를 가지고 있어 synchronized를 쓰면 각 인스턴스의 모니터를 사용할 수 있다.")])]),t._v(" "),e("img",{attrs:{width:"501",alt:"모니터",src:"https://user-images.githubusercontent.com/50111853/155874579-7c3a92a3-f2ce-4af4-8c28-ef16f9b8d7de.png"}}),t._v(" "),e("ul",[e("li",[t._v("공유데이터에 접근하려면 내부의 프로시저인 모니터를 통해야만함")]),t._v(" "),e("li",[t._v("공유 데이터에 접근하는 프로시저를 함수로 구현해두었음")]),t._v(" "),e("li",[t._v("모니터 내부 프로시저는 동시에 여러개가 실행이 불가능하도록 모니터가 막고 있음 => "),e("strong",[t._v("락을 걸 (P,V연산 할) 필요 없음")])]),t._v(" "),e("li",[t._v("모니터 안에선 한 프로세스만 활성화된다. 액티브 프로세스가 1개만 있도록 모니터 자체에서 제어한다!!")])]),t._v(" "),e("img",{attrs:{width:"509",alt:"condition variable",src:"https://user-images.githubusercontent.com/50111853/155874631-c2f1adf3-33ea-41d9-a063-304b4d983c26.png"}}),t._v(" "),e("h3",{attrs:{id:"condition-variable"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#condition-variable"}},[t._v("#")]),t._v(" condition variable")]),t._v(" "),e("img",{attrs:{width:"500",alt:"바운디드 버퍼 문제와 조건 변수",src:"https://user-images.githubusercontent.com/50111853/155874643-18666c98-a0e3-481a-a93c-e032686834d6.png"}}),t._v(" "),e("ul",[e("li",[t._v("특정 조건을 만족하지 않은 프로세스를 잠들게 하는데 그 때 그 조건: 컨디션 var")]),t._v(" "),e("li",[t._v("위 bonded buffer 문제를 condition var로 해결하자면 공유버퍼가 모니터 안에 있음")]),t._v(" "),e("li",[t._v("그래서 생산자든 소비자든 모니터 안에서 활성화되므로 락 걸 필요 X")]),t._v(" "),e("li",[t._v("만약 다른 놈이 있을 경우 **빈 버퍼를 기다리는 큐(생산자) 또는 내용이 들어있는 버퍼를 기다리는 큐(소비자)**에 줄을 서고 producer->produce, consumer-> consume 함수 앞에서 기다리며 잠든다.")])]),t._v(" "),e("p",[t._v("x.wait(): 프로세스 재워라\nx.signal(): 깨워라")]),t._v(" "),e("h2",{attrs:{id:"느낀-점"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#느낀-점"}},[t._v("#")]),t._v(" 느낀 점")]),t._v(" "),e("p",[t._v("지난 차시에 내가 binary semaphore = mutex라고 했었다. 바이너리 세마포는 값이 0과 1 중 하나만 가능하기 때문에 '사용 가능한 자원이 있다 또는 없다'를 나타낸다. 뮤텍스 락과 유사하게 상호 배제의 기능을 가진다. 몇몇 시스템에선 아예 뮤텍스 락 없이 이진 세마포가 대신 상호 배제를 보장한다. 이 둘의 차이는 바로 락을 해제할 수 있는 프로세스이다. 뮤텍스의 경우 락을 건 프로세스 자신만이 락을 해제할 수 있는 반면 이진 세마포어의 경우 다른 프로세스가 락을 해제할 수 있다. 누군가에게 세마포어를 설명할 때, '여러 프로세스가 동시에 한 자원에 접근하는 걸 막고자 락을 걸 때, 프로세스가 사용 가능한 자원의 토탈 개수를 나타내는 변수'라고 설명하면 되는 걸까?!")]),t._v(" "),e("h2",{attrs:{id:"복습-문제"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#복습-문제"}},[t._v("#")]),t._v(" 복습 문제")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("bounded-buffer problem에서 소비자 프로세스가 데이터를 꺼내갈 때 데이터를 꺼낼 Full 버퍼에만 락을 건다. (O,X)\n정답: X, 공유 버퍼 전체에 락을 건다.")])]),t._v(" "),e("li",[e("p",[t._v("dining philosophers 문제에서 데드락이 발생하는 경우는?\n정답: 모든 철학자가 동시에 젓가락을 잡으려고 하는 경우")])]),t._v(" "),e("li",[e("p",[t._v("monitor에서 프로세스가 wait()할 때, 생산자 프로세스는 (꽉 찬/빈) 버퍼를 기다리는 큐에 줄을 서고 소비자 프로세스는 (꽉 찬/빈) 버퍼를 기다리는 큐에 줄을 선다.\n정답: 빈, 꽉 찬")])])])])}),[],!1,null,null,null);r.default=s.exports}}]);